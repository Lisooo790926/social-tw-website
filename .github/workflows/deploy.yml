name: Deploy
run-name: ${{ github.actor }} acitvates the actions ðŸš€

on:
    push:
        branches:
            - stage

jobs:
    deploy:
        runs-on: ubuntu-latest
        steps:
            - name: Check out repository code
              uses: actions/checkout@v3

            - name: Install node.js
              uses: actions/setup-node@v3
              with:
                  node-version: '18'

            - name: Install dependencies
              run: yarn

            - name: Install Tenderly CLI
              run: curl https://raw.githubusercontent.com/Tenderly/tenderly-cli/master/scripts/install-linux.sh | sudo sh

            - name: Deploy contracts
              run: yarn contracts deploy:devnet
              env:
                  TENDERLY_ACCESS_KEY: ${{ secrets.TENDERLY_ACCESS_KEY }}
                  TENDERLY_PROJECT_SLUG: ${{ secrets.TENDERLY_PROJECT_SLUG }}
                  TENDERLY_DEVNET_TEMPLATE: ${{ secrets.TENDERLY_DEVNET_TEMPLATE }}
                  TENDERLY_ACCOUNT_ID: ${{ secrets.TENDERLY_ACCOUNT_ID }}

            - name: Export Config to GitHub Envs
              run: gh variables -f /packages/relay/.env --repo $GITHUB_REPOSITORY
              env:
                  GH_TOKEN: ${{ secrets.GH_PAT }}
    backend:
        permissions:
            contents: 'read'
            id-token: 'write'

        runs-on: ubuntu-latest
        steps:
            - name: Production Code
              uses: 'actions/checkout@v3'

            - name: Authenticate to Google Cloud
              id: auth
              uses: 'google-github-actions/auth@v1'
              with:
                  token_format: access_token
                  workload_identity_provider: '${{ secrets.WIF_PROVIDER }}'
                  service_account: '${{ secrets.WIF_SERVICE_ACCOUNT }}'
                  access_token_lifetime: 300s

            ## artifact registry auth setup
            - name: Login to Artifact Registry
              id: docker-auth
              uses: docker/login-action@v1
              with:
                  registry: ${{ vars.GAR_LOCATION }}-docker.pkg.dev
                  username: oauth2accesstoken
                  password: ${{ steps.auth.outputs.access_token }}

            - name: Build and Push Container
              run: |-
                  docker build -t "${{ vars.GAR_LOCATION }}-docker.pkg.dev/${{ vars.PROJECT_ID }}/${{ vars.REPOSITORY }}/${{ vars.BACKEND_SERVICE }}:${{ github.sha }}" ./
                  docker push "${{ vars.GAR_LOCATION }}-docker.pkg.dev/${{ vars.PROJECT_ID }}/${{ vars.REPOSITORY }}/${{ vars.BACKEND_SERVICE }}:${{ github.sha }}"

            - name: Deploy to Cloud Run
              id: deploy
              uses: google-github-actions/deploy-cloudrun@v0
              with:
                  service: ${{ vars.BACKEND_SERVICE }}
                  region: ${{ vars.REGION }}
                  image: ${{ vars.GAR_LOCATION }}-docker.pkg.dev/${{ vars.PROJECT_ID }}/${{ vars.REPOSITORY }}/${{ vars.BACKEND_SERVICE }}:${{ github.sha }}
                  # add ENV as below
                  env_vars: |
                      TWITTER_CLIENT_ID=${{ secrets.TWITTER_CLIENT_ID }}
                      TWITTER_CLIENT_KEY=${{ secrets.TWITTER_CLIENT_KEY }}
                      CLIENT_URL=${{ vars.CLIENT_URL }}
                      CALLBACK_URL=${{ vars.CALLBACK_URL }}

            - name: Allow public access
              id: unauthenticated
              run: gcloud run services add-iam-policy-binding ${{ vars.BACKEND_SERVICE }} --region=${{ vars.REGION }} --member="allUsers" --role="roles/run.invoker"

            - name: Show Output
              run: echo ${{ steps.deploy.outputs.url }}
    frontend:
        permissions:
            contents: 'read'
            id-token: 'write'

        runs-on: ubuntu-latest
        steps:
            - name: Production Code
              uses: 'actions/checkout@v3'

            - name: Authenticate to Google Cloud
              id: auth
              uses: 'google-github-actions/auth@v1'
              with:
                  token_format: access_token
                  workload_identity_provider: '${{ secrets.WIF_PROVIDER }}'
                  service_account: '${{ secrets.WIF_SERVICE_ACCOUNT }}'
                  access_token_lifetime: 900s

            ## artifact registry auth setup
            - name: Login to Artifact Registry
              id: docker-auth
              uses: docker/login-action@v1
              with:
                  registry: ${{ vars.GAR_LOCATION }}-docker.pkg.dev
                  username: oauth2accesstoken
                  password: ${{ steps.auth.outputs.access_token }}

            - name: Build and Push Container
              run: |-
                  docker build -t "${{ vars.GAR_LOCATION }}-docker.pkg.dev/${{ vars.PROJECT_ID }}/${{ vars.REPOSITORY }}/${{ vars.FRONTEND_SERVICE }}:${{ github.sha }}" -f ./packages/frontend/Dockerfile .
                  docker push "${{ vars.GAR_LOCATION }}-docker.pkg.dev/${{ vars.PROJECT_ID }}/${{ vars.REPOSITORY }}/${{ vars.FRONTEND_SERVICE }}:${{ github.sha }}"

            - name: Deploy to Cloud Run
              id: deploy
              uses: google-github-actions/deploy-cloudrun@v0
              with:
                  service: ${{ vars.FRONTEND_SERVICE }}
                  region: ${{ vars.REGION }}
                  image: ${{ vars.GAR_LOCATION }}-docker.pkg.dev/${{ vars.PROJECT_ID }}/${{ vars.REPOSITORY }}/${{ vars.FRONTEND_SERVICE }}:${{ github.sha }}
                  ## set --max-old-space-size=8192 for node.js to increase memory limit
                  env_vars: |
                      ENV=${{ vars.ENV }}
                      STAGE_SERVER=${{ vars.${{ vars.ENV }}_SERVER }}
                      NODE_OPTIONS=${{ vars.NODE_OPTIONS }}

            - name: Allow public access
              id: unauthenticated
              run: gcloud run services add-iam-policy-binding ${{ vars.FRONTEND_SERVICE }} --region=${{ vars.REGION }} --member="allUsers" --role="roles/run.invoker"

            - name: Show Output
              run: echo ${{ steps.deploy.outputs.url }}
